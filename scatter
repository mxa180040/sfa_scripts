import maya.OpenMayaUI as omui
import maya.cmds as cmds
from PySide2 import QtWidgets, QtCore
from shiboken2 import wrapInstance
import random


def maya_main_window():
    """Return the Maya main window widget"""
    main_window = omui.MQtUtil_mainWindow()
    return wrapInstance(long(main_window), QtWidgets.QWidget)


class ScatterToolUI(QtWidgets.QDialog):
    """Class for Scatter Tool UI"""

    def __init__(self):
        super(ScatterToolUI, self).__init__(parent=maya_main_window())
        self.setWindowTitle("Scatter Tool")
        self.setMinimumWidth(500)
        self.setWindowFlags(self.windowFlags() ^
                            QtCore.Qt.WindowContextHelpButtonHint)

    def create_connections(self):
        """Connects signals and slots"""
        self.load_source_btn.clicked.connect(self.load_source)
        self.load_destination_btn.clicked.connect(self.load_destination)
        self.scatter_btn.clicked.connect(self.scatter)
        self.load_vertices_btn.clicked.connect(self.load_vertices)
        self.align_checkbox_.stateChanged.connect(self.align_normals)

    def _create_button_ui(self):
        self.load_source_btn = QtWidgets.QPushButton()
        self.load_destination_btn = QtWidgets.QPushButton()
        self.load_vertices_btn = QtWidgets.QPushButton()
        self.align_checkbox_ = QtWidgets.QCheckBox()
        layout = QtWidgets.QHBoxLayout()
        layout.addWidget(self.load_source_btn)
        layout.addWidget(self.load_destination_btn)
        layout.addWidget(self.load_vertices_btn)
        layout.addWidget(self.align_checkbox_)
        return layout

    def create_ui(self, MainWindow):
        MainWindow.setWindowTitle("Scatter Tool")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.horizontalLayout = QtWidgets.QHBoxLayout()

        self.source_object_dpy = QtWidgets.QLineEdit(self.centralwidget)
        self.source_object_dpy.setReadOnly(True)
        self.horizontalLayout.addWidget(self.source_object_dpy)
        self.load_source_btn = QtWidgets.QPushButton("Load Source Object")
        self.horizontalLayout.addWidget(self.load_source_btn)
        spacerItem = QtWidgets .QSpacerItem(20, 20,
                                            QtWidgets.QSizePolicy.Expanding,
                                            QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.destination_object_dpy = QtWidgets.QLineEdit(self.centralwidget)
        self.destination_object_dpy.setReadOnly(True)
        self.horizontalLayout.addWidget(self.destination_object_dpy)
        self.load_destination_btn = QtWidgets.QPushButton("Load "
                                                          "Destination "
                                                          "Object")
        self.horizontalLayout.addWidget(self.load_destination_btn)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.vertices_dpy = QtWidgets.QLineEdit(self.centralwidget)
        self.vertices_dpy.setReadOnly(True)
        self.horizontalLayout.addWidget(self.vertices_dpy)
        self.load_vertices_btn = QtWidgets.QPushButton("Load Object" 
                                                        " Vertices")
        self.horizontalLayout.addWidget(self.load_vertices_btn)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.label = QtWidgets.QLabel("Number of Instances")
        self.horizontalLayout.addWidget(self.label)
        self.num_instances = QtWidgets.QSpinBox(self.centralwidget)
        self.num_instances.setMinimumSize(QtCore.QSize(100, 0))
        self.num_instances.setMaximum(10000)
        self.num_instances.setProperty("value", 1)
        self.horizontalLayout.addWidget(self.num_instances)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.label = QtWidgets.QLabel("Align To Normals")
        self.horizontalLayout.addWidget(self.label)
        self.align_normals = QtWidgets.QCheckBox(self.centralwidget)
        self.horizontalLayout.addWidget(self.align_normals)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.label = QtWidgets.QLabel("Min Object Scale")
        self.horizontalLayout.addWidget(self.label)
        self.min_scale = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.min_scale.setSingleStep(0.25)
        self.min_scale.setProperty("value", 1.0)
        self.min_scale.setObjectName("min_scale")
        self.horizontalLayout.addWidget(self.min_scale)
        self.horizontalLayout.addItem(spacerItem)
        self.label = QtWidgets.QLabel("Max Object Scale")
        self.horizontalLayout.addWidget(self.label)
        self.max_scale = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.max_scale.setSingleStep(0.25)
        self.max_scale.setProperty("value", 1.0)
        self.max_scale.setObjectName("max_scale")
        self.horizontalLayout.addWidget(self.max_scale)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.label = QtWidgets.QLabel("Min Rotation")
        self.horizontalLayout.addWidget(self.label)
        self.rotate_min = QtWidgets.QSpinBox(self.centralwidget)
        self.rotate_min.setMinimum(0)
        self.rotate_min.setProperty("value", 0)
        self.horizontalLayout.addWidget(self.rotate_min)
        self.label = QtWidgets.QLabel("Max Rotation")
        self.horizontalLayout.addWidget(self.label)
        self.rotate_max = QtWidgets.QSpinBox(self.centralwidget)
        self.rotate_max.setMaximum(360)
        self.rotate_max.setProperty("value", 360)
        self.horizontalLayout.addWidget(self.rotate_max)

        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.label = QtWidgets.QLabel("Min Hue Range")
        self.horizontalLayout.addWidget(self.label)
        self.min_hue = QtWidgets.QSpinBox(self.centralwidget)
        self.min_hue.setMinimum(0)
        self.min_hue.setProperty("value", 0)
        self.horizontalLayout.addWidget(self.min_hue)
        self.label = QtWidgets.QLabel("Max Hue Range")
        self.horizontalLayout.addWidget(self.label)
        self.max_hue = QtWidgets.QSpinBox(self.centralwidget)
        self.max_hue.setMaximum(31)
        self.max_hue.setProperty("value", 31)
        self.horizontalLayout.addWidget(self.max_hue)

        self.verticalLayout.addLayout(self.horizontalLayout)
        self.scatter_btn = QtWidgets.QPushButton("Scatter")
        self.verticalLayout.addWidget(self.scatter_btn)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 250, 21))
        MainWindow.setMenuBar(self.menubar)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)


class ScatterTool(QtWidgets.QMainWindow):

    def __init__(self, parent=maya_main_window()):
        super(ScatterTool, self).__init__(parent)

        self.ui = ScatterToolUI()
        self.ui.create_ui(self)

        self.ui.load_source_btn.clicked.connect(self.load_source)
        self.ui.load_destination_btn.clicked.connect(self.load_destination)
        self.ui.scatter_btn.clicked.connect(self.scatter)
        self.ui.load_vertices_btn.clicked.connect(self.load_vertices)

        self.surface = None
        self.object = None
        self.vertex = None

    def load_source(self):

        """Loads source object to scatter"""

        selection = cmds.ls(selection=True)

        if len(selection) != 1:
            message = "Please select one object."
            response = QtWidgets.QMessageBox.information(self, "Error",
                                                         message)

        else:

            surface = selection[0]

            if surface != self.object:

                self.surface = surface

                self.ui.source_object_dpy.setText(surface)

            else:
                message = "Source Object Can't Be The Same As " \
                          "Destination Object."
                response = QtWidgets.QMessageBox.warning(self, "Error",
                                                         message)

    def load_destination(self):

        """Loads destination object to be scattered onto"""

        selection = cmds.ls(selection=True)

        if len(selection) != 1:
            message = "Please select one object."
            response = QtWidgets.QMessageBox.information(self, "Error",
                                                         message)

        else:

            object = selection[0]

            if object != self.surface:

                self.object = object

                self.ui.destination_object_dpy.setText(object)

            else:
                message = "Source Object Can't Be The Same As " \
                          "Destination Object."
                response = QtWidgets.QMessageBox.information(self,
                                                             "Error",
                                                             message)

    def load_vertices(self):

        """Loads vertices to scatter source object onto"""


        selection = cmds.ls(selection=True)

        if len(selection) == self.surface or self.object:
            message = "Please select vertices only."
            response = QtWidgets.QMessageBox.information(self, "Error",
                                                         message)

        else:
            vertex = selection[0]

        if vertex != self.object or self.surface:

            self.vertex = vertex

            self.ui.vertices_dpy.setText(vertex)


    def align_normals(self):

        """Function that aligns geometry to normals"""

        new_obj = self.obj_instance()

        cmds.normalConstraint(self.surface, new_obj, aimVector=[0.0,
                                                                1.0,
                                                                0.0])

    def randomize_rotation(self, node):

        """Randomizes the rotation angle of objects"""

        random_index = random.randint(self.ui.rotate_min.value(),
                                      self.ui.rotate_max.value())

        cmds.setAttr("%s.overrideEnabled" % node, True, random_index)

    def obj_instance(self):

        """Creates instance of new object"""

        new_obj = cmds.instance(self.object)[0]
        return new_obj


    def scatter(self):

        """Scatter tool mechanism"""

        if self.surface and self.object or self.object and self.vertex:

            self.copied_nodes = []

            self.instances = self.ui.num_instances.value()
            self.scale_min = self.ui.min_scale.value()
            self.scale_max = self.ui.max_scale.value()
            self.rotate_min = self.ui.rotate_min.value()
            self.rotate_max = self.ui.rotate_max.value()
            self.min_hue = self.ui.min_hue.value()
            self.max_hue = self.ui.max_hue.value()
            surface_wsp = cmds.xform(self.surface, query=True,
                                     worldSpace=True,
                                     boundingBox=True)
            xmin, ymin, zmin, xmax, ymax, zmax = surface_wsp

            for instance_num in range(1, self.instances + 1):
                pos_x = random.uniform(xmin, xmax)
                pos_y = random.uniform(ymin, ymax)
                pos_z = random.uniform(zmin, zmax)

                new_obj = self.obj_instance()

                cmds.setAttr("%s.tx" % new_obj, float(pos_x))
                cmds.setAttr("%s.ty" % new_obj, float(pos_y))
                cmds.setAttr("%s.tz" % new_obj, float(pos_z))

                random_scale = random.uniform(self.scale_min,
                                              self.scale_max)
                cmds.setAttr("%s.scaleX" % new_obj, random_scale)
                cmds.setAttr("%s.scaleY" % new_obj, random_scale)
                cmds.setAttr("%s.scaleZ" % new_obj, random_scale)

                g_constrain = cmds.geometryConstraint(self.surface,
                                                      new_obj,
                                                      weight=10)

                n_constraint = cmds.normalConstraint(self.surface,
                                                     new_obj)
                cmds.delete(n_constraint)
                cmds.delete(g_constrain)

                self.randomize_rotation(new_obj)
                self.copied_nodes.append(new_obj)

        else:
            message = "Please load a source and destination object"
            response = QtWidgets.QMessageBox.information(self, "Error",
                                                         message)



def run():
    try:
        ScatterTool.close()
    except:
        pass

    scatter = ScatterTool()
    scatter.show()
